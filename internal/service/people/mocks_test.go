// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package people is a generated GoMock package.
package people

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/khasmag06/effective-mobile-test/internal/entity"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CheckPersonExists mocks base method.
func (m *Mockrepository) CheckPersonExists(ctx context.Context, personID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPersonExists", ctx, personID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPersonExists indicates an expected call of CheckPersonExists.
func (mr *MockrepositoryMockRecorder) CheckPersonExists(ctx, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPersonExists", reflect.TypeOf((*Mockrepository)(nil).CheckPersonExists), ctx, personID)
}

// CreatePerson mocks base method.
func (m *Mockrepository) CreatePerson(ctx context.Context, person entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockrepositoryMockRecorder) CreatePerson(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*Mockrepository)(nil).CreatePerson), ctx, person)
}

// DeletePersonData mocks base method.
func (m *Mockrepository) DeletePersonData(ctx context.Context, personID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonData", ctx, personID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonData indicates an expected call of DeletePersonData.
func (mr *MockrepositoryMockRecorder) DeletePersonData(ctx, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonData", reflect.TypeOf((*Mockrepository)(nil).DeletePersonData), ctx, personID)
}

// GetPeople mocks base method.
func (m *Mockrepository) GetPeople(ctx context.Context, page, limit int, sortBy, sortOrder string) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeople", ctx, page, limit, sortBy, sortOrder)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeople indicates an expected call of GetPeople.
func (mr *MockrepositoryMockRecorder) GetPeople(ctx, page, limit, sortBy, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeople", reflect.TypeOf((*Mockrepository)(nil).GetPeople), ctx, page, limit, sortBy, sortOrder)
}

// UpdatePersonData mocks base method.
func (m *Mockrepository) UpdatePersonData(ctx context.Context, personID int, person entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonData", ctx, personID, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePersonData indicates an expected call of UpdatePersonData.
func (mr *MockrepositoryMockRecorder) UpdatePersonData(ctx, personID, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonData", reflect.TypeOf((*Mockrepository)(nil).UpdatePersonData), ctx, personID, person)
}
